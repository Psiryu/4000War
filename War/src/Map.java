
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor..
 */

/**
 *
 * @author Prem
 */
public class Map extends javax.swing.JFrame {

   //variable for keeping track of the current players' turns;
    public int x, y;
    //variables for if an army is on the selected node, and if it can be split/merged
    public Boolean armyHere = false;
    public Boolean divisableArmy = false;
    public Boolean mergableArmy = false;
    //nodeSelection is used for selecting a node
    public int nodeSelected = 0;
    
    /**
     * Creates new form Map
     */
    public Map() {
        initComponents();  
        
        //clears off the information panel
        ClearMenuInfo();
        
        //sets a label that informs you whom you are versing.
        if((Global.opponent) == true)
            labelOpponent.setText("Against Player");
        else
            labelOpponent.setText("Against AI");
        
        //sets labels for scenario selected, and that it is player 1's turn
        labelScenario.setText("Scenario: " + Global.intScenario);        
        labelCurPlayer.setText("Player One's turn");
        
        GameStart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        menuItemClose = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        labelScenario = new javax.swing.JLabel();
        labelOpponent = new javax.swing.JLabel();
        labelCurPlayer = new javax.swing.JLabel();
        labelTurnCount = new javax.swing.JLabel();
        buttonMenu = new javax.swing.JToggleButton();
        buttonExit = new javax.swing.JButton();
        menuInfo = new javax.swing.JPanel();
        labelInfo1 = new javax.swing.JLabel();
        labelInfo2 = new javax.swing.JLabel();
        labelInfo3 = new javax.swing.JLabel();
        labelInfo4 = new javax.swing.JLabel();
        labelInfo5 = new javax.swing.JLabel();
        labelInfo6 = new javax.swing.JLabel();
        buttonFinishTurn = new javax.swing.JButton();
        panelMap = new javax.swing.JPanel();
        nodePlaceholder1 = new javax.swing.JButton();
        nodePlaceholder2 = new javax.swing.JButton();
        nodePlaceholder3 = new javax.swing.JButton();
        nodePlaceholder4 = new javax.swing.JButton();
        nodePlaceholder5 = new javax.swing.JButton();
        nodePlaceholder6 = new javax.swing.JButton();
        nodePlaceholder7 = new javax.swing.JButton();
        nodePlaceholder8 = new javax.swing.JButton();
        nodePlaceholder9 = new javax.swing.JButton();
        nodePlaceholder10 = new javax.swing.JButton();
        nodePlaceholder11 = new javax.swing.JButton();
        nodePlaceholder12 = new javax.swing.JButton();
        nodePlaceholder13 = new javax.swing.JButton();
        nodePlaceholder14 = new javax.swing.JButton();
        buttonMapImage = new javax.swing.JButton();

        popupMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        popupMenu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                popupMenuFocusLost(evt);
            }
        });

        menuItemClose.setText("Close Menu");
        menuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloseActionPerformed(evt);
            }
        });
        popupMenu.add(menuItemClose);

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        jMenu1.add(jMenuItem2);

        popupMenu.add(jMenu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 255));
        setMaximumSize(new java.awt.Dimension(900, 600));
        setMinimumSize(new java.awt.Dimension(900, 600));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelScenario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelScenario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelScenario.setText("text");
        getContentPane().add(labelScenario, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        labelOpponent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelOpponent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelOpponent.setText("text");
        labelOpponent.setName("labelOpponent"); // NOI18N
        getContentPane().add(labelOpponent, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        labelCurPlayer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelCurPlayer.setText("text");
        getContentPane().add(labelCurPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, -1, -1));

        labelTurnCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelTurnCount.setText("Turn: 1");
        getContentPane().add(labelTurnCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, -1, -1));

        buttonMenu.setText("Main Menu");
        buttonMenu.setToolTipText("");
        buttonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMenuActionPerformed(evt);
            }
        });
        getContentPane().add(buttonMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        buttonExit.setText("End Game");
        buttonExit.setMaximumSize(new java.awt.Dimension(83, 23));
        buttonExit.setMinimumSize(new java.awt.Dimension(83, 23));
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });
        getContentPane().add(buttonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 5, 90, -1));

        menuInfo.setMaximumSize(new java.awt.Dimension(700, 70));
        menuInfo.setMinimumSize(new java.awt.Dimension(700, 70));
        menuInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelInfo1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo1.setText("city name");
        menuInfo.add(labelInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        labelInfo2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo2.setText("seasons");
        menuInfo.add(labelInfo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, -1));

        labelInfo3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo3.setText("turn/turns left");
        menuInfo.add(labelInfo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));

        labelInfo4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo4.setText("political power?");
        menuInfo.add(labelInfo4, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        labelInfo5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo5.setText("player's armies");
        menuInfo.add(labelInfo5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        labelInfo6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelInfo6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelInfo6.setText("enemy's armies");
        menuInfo.add(labelInfo6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, -1, -1));

        getContentPane().add(menuInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, -1, -1));

        buttonFinishTurn.setText("Finish Turn");
        buttonFinishTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinishTurnActionPerformed(evt);
            }
        });
        getContentPane().add(buttonFinishTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(753, 3, 110, 30));

        panelMap.setMaximumSize(new java.awt.Dimension(820, 470));
        panelMap.setMinimumSize(new java.awt.Dimension(820, 470));
        panelMap.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nodePlaceholder1.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder1.setOpaque(false);
        nodePlaceholder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder1ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 30, 30));

        nodePlaceholder2.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder2.setOpaque(false);
        nodePlaceholder2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder2ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 30, 30));

        nodePlaceholder3.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder3.setOpaque(false);
        nodePlaceholder3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder3ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 30, 30));

        nodePlaceholder4.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder4.setOpaque(false);
        nodePlaceholder4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder4ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 30, 30));

        nodePlaceholder5.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder5.setOpaque(false);
        nodePlaceholder5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder5ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 30, 30));

        nodePlaceholder6.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-port.png"))); // NOI18N
        nodePlaceholder6.setOpaque(false);
        nodePlaceholder6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder6ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 30, 30));

        nodePlaceholder7.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder7.setOpaque(false);
        nodePlaceholder7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder7ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder7, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 200, 30, 30));

        nodePlaceholder8.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder8.setOpaque(false);
        nodePlaceholder8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder8ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 30, 30));

        nodePlaceholder9.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder9.setOpaque(false);
        nodePlaceholder9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder9ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 260, 30, 30));

        nodePlaceholder10.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder10.setOpaque(false);
        nodePlaceholder10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder10ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 280, 30, 30));

        nodePlaceholder11.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-port.png"))); // NOI18N
        nodePlaceholder11.setOpaque(false);
        nodePlaceholder11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder11ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder11, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 291, 30, 30));

        nodePlaceholder12.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-port.png"))); // NOI18N
        nodePlaceholder12.setOpaque(false);
        nodePlaceholder12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder12ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder12, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, 30, 30));

        nodePlaceholder13.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-town.png"))); // NOI18N
        nodePlaceholder13.setOpaque(false);
        nodePlaceholder13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder13ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder13, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 270, 30, 30));

        nodePlaceholder14.setBackground(new java.awt.Color(0, 0, 0));
        nodePlaceholder14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map-node-port.png"))); // NOI18N
        nodePlaceholder14.setOpaque(false);
        nodePlaceholder14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePlaceholder14ActionPerformed(evt);
            }
        });
        panelMap.add(nodePlaceholder14, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 30, 30));

        buttonMapImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Map1_Sulla.png"))); // NOI18N
        buttonMapImage.setText("jButton1");
        buttonMapImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonMapImage.setContentAreaFilled(false);
        buttonMapImage.setIconTextGap(0);
        buttonMapImage.setMaximumSize(new java.awt.Dimension(800, 450));
        buttonMapImage.setMinimumSize(new java.awt.Dimension(800, 450));
        buttonMapImage.setOpaque(false);
        buttonMapImage.setPreferredSize(new java.awt.Dimension(800, 450));
        buttonMapImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMapImageActionPerformed(evt);
            }
        });
        panelMap.add(buttonMapImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        getContentPane().add(panelMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final void GameStart() {
        //this method applies values that are required at the very start of the
        //game for player 1. (essentially "finish turn" button aftereffects
        //that need to happen for th every first turn).
        
        try {
            SetDefaultColours();
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        SetColours();
    }
    
//Action will control all node-based actions. Dimmed public because no need
//for hidden values, and allows information to be passed more easily
    public void Action() {
        ClearMenuInfo();
        
        try {
            SetCurrentColour();
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        labelInfo1.setText(Scenario.listOfNodes[nodeSelected].name);
        mergableArmy = false;
        divisableArmy = false;
        armyHere = false;
        
        //establishes an army array of all player controlled armies
        int[][] armies = null;
        //calls to fill the array
        armies = ObtainArmies(armies);
        
        //displays if any of your armies are at the selected node
        ArmiesHere(armies);
        
        //creates the popup menu to be displayed, containing all actions
        //the user can do at the selected node
        OpenPopup(armies);
        
    }
    
    public int[][] ObtainArmies(int[][] listArmy) {
        //creates list to use to keep track of armies.
        //first portion of rectangular array represents the differnt armies
        //within the list. Second portion is [id, size, location, fleet bool].  

        //first sets player 1's armies (red team), then does the same
        //for player 2 (blue team). Commented first half only, both sets
        //are exactly identical, just "redPlayer" changed to "bluePlayer"
        if(Global.curPlayer == 0)
        {
            //sets the array to be the size of player's total army count
            listArmy = new int[Scenario.redPlayer.combatUnits.size()][4];
            //loops for each army in the array
            for(int i = 0; i < Scenario.redPlayer.combatUnits.size(); i++) {
                //sets each army's id
                listArmy[i][0] = Scenario.redPlayer.combatUnits.get(i).cUnitID;
                //sets each army's size
                listArmy[i][1] = Scenario.redPlayer.combatUnits.get(i).size;
                //sets each army's location
                listArmy[i][2] = Scenario.redPlayer.combatUnits.get(i).GetLocation().id;
                //sets an int value for the isFleet bool (1 for if true)
                if (Scenario.redPlayer.combatUnits.get(i).isFleet == true)
                    listArmy[i][3] = 1;
                else
                    listArmy[i][3] = 0;
            }
        } else {
            listArmy = new int[Scenario.bluePlayer.combatUnits.size()][4];
            for(int i = 0; i < Scenario.bluePlayer.combatUnits.size(); i++) {
                listArmy[i][0] = Scenario.bluePlayer.combatUnits.get(i).cUnitID;
                listArmy[i][1] = Scenario.bluePlayer.combatUnits.get(i).size;
                listArmy[i][2] = Scenario.bluePlayer.combatUnits.get(i).GetLocation().id;
                if (Scenario.bluePlayer.combatUnits.get(i).isFleet == true)
                    listArmy[i][3] = 1;
                else
                    listArmy[i][3] = 0;
            }
        }

        return listArmy;
    }
    
    public void ArmiesHere(int[][] armies)
    {
        //creates a string for user display
        String sizes = "";
        //a counter for if armies can merge (mergable[0] counts small armies,
        //while mergable[1] counts mediums.
        int[] mergable = new int[2];
        mergable[0] = 0;
        mergable[1] = 0;
        
        //indexer i
        int i = 0;
        for (int[] armie : armies) {
            //checks if current army in array at index is located at this node
            if (nodeSelected == armies[i][2]) {
                //adds army size to user output string and sets "armyHere"
                //to true, for later use. Multiple looped true sets are fine.
                sizes += (ConvertSize(armies[i][1], armies[i][3]) + " ");
                armyHere = true;
                //checks if at least one medium army or higher exists on the
                //selected node, for later use
                if(armies[i][1] > 5)
                    divisableArmy = true;
                //checks if at least two smalls (that aren't fleets) exist here
                if(armies[i][1] < 6 && armies[i][3] == 0)
                    mergable[0]++;
                //checks if two or more mediums exist here
                if(armies[i][1] > 5 && armies[i][1] < 11)
                    mergable[1]++;
                //sets public boolean mergableArmy to true if either values in
                //the array are greater than 1
                if(mergable[0] > 1 || mergable[1] > 1)
                    mergableArmy = true;
            }
            i++;
        }
        
        //check for if no armies here, for user output
        if(sizes.equals(""))
            sizes = "none";
        
        labelInfo5.setText("Your armies here: " + sizes);
    }
    
    
     private void OpenPopup(final int[][] armies) {
        //first clears the popup menu (in case another node was clicked
        //while the menu was still active. Then displays and repopulates it.
        ClearPopupMenu();
        
        //checks if there are armies on the selected node with armyHere
        if(armyHere.equals(true))
        {
            //creates the menu item for movement, as only one army being
            //present is the only requirement for it
            final JMenuItem menuItemMove = new JMenuItem("Movement");
            //adds the action for when this item is clicked
            menuItemMove.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    //sends the army list to InitializeMovement when clicked
                    InitializeMovement(armies);
                }
            });

            //adds this item to the popup menu
            popupMenu.add(menuItemMove);
        }
        //checks if divisableArmy (bool for if an army of medium or higher
        //exists on selected node) is true
        if(divisableArmy.equals(true)) {
             //creates the menu item for dividing
            final JMenuItem menuItemDivide = new JMenuItem("Divide");
            //adds the action for when this item is clicked
            menuItemDivide.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    //sends the army list to DividingArmies when clicked
                    DividingArmies(armies);
                }
            });
            popupMenu.add(menuItemDivide);
        }
         //checks if mergableArmy (bool for if two or more mediums or smalls
        //exists on selected node) is true
        if(mergableArmy.equals(true)) {
             //creates the menu item for merging
            final JMenuItem menuItemMerge = new JMenuItem("Merge");
            //adds the action for when this item is clicked
            menuItemMerge.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    //sends the army list to DividingArmies when clicked
                    BeginMergingArmies(armies);
                }
            });
            popupMenu.add(menuItemMerge);
        }
    
        //ensures gui is up to date and then displays it at the selected node
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
   
    
    private void InitializeMovement(final int[][] armies) {
        //clears menu and readds new items (armies at the node)
        ClearPopupMenu();
        
        //first, it re checks which armies are at this node
        //then it adds a new menu item for each individual army.
        //it loops for every item in the array.
        int i = 0;
        for (int[] armie : armies) {
            if (nodeSelected == armies[i][2]) {
                //obtains army size, because the method call being
                //within the next line after it caused issues
                final String armySize = ConvertSize(armies[i][1],armies[i][3]);
                
                //creates a new array item to send out, since nested method
                //can't use the indexing for the array.
                final int[][] armyToMove = new int[1][4];
                armyToMove[0] = armies[i];
                
                //creates the item for this army unit on this location.
                //The action is to send current armyToMove to MoveTo method.
                JMenuItem menuItemMove = new JMenuItem(armySize);
                menuItemMove.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event) {
                        MoveTo(armyToMove);
                    }
                });
                //finally, adds this item to the popup menu.
                popupMenu.add(menuItemMove);
            }
            //increments so the loop can procede with proper indexing.
            i++;
        }
        
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
    
    private void MoveTo(final int[][] army) {
        ClearPopupMenu();

        //loops for every road in the list of roads in Scenario
        for (Road roads: Scenario.listOfRoads) {
            //checks if current locaion in array at index is the selected city
            //first it checks if locationA on the road is the current node,
            //then it will do the same commands for if it is locationB
            if (roads.locationA.id == army[0][2]) {
                //adds locationB name to a final string
                final String movingTo = roads.locationB.name;
                //creates the menu item for this road
                JMenuItem menuItemMove = new JMenuItem(movingTo);
                final Road roads2 = roads;
                menuItemMove.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event) {
                        MapEvent.addMovement(army[0][0], roads2, roads2.locationB.id);
                        ClearPopupMenu();
                    }
                });
                //finally, adds this item to the popup menu.
                popupMenu.add(menuItemMove);
                
            } else if (roads.locationB.id == army[0][2]) {
                //adds locationB name to a final string
                final String movingTo = roads.locationA.name;
                //creates the menu item for this road
                JMenuItem menuItemMove = new JMenuItem(movingTo);
                final Road roads2 = roads;
                menuItemMove.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event) {
                        MapEvent.addMovement(army[0][0], roads2, roads2.locationA.id);
                        ClearPopupMenu();
                    }
                });
                //finally, adds this item to the popup menu.
                popupMenu.add(menuItemMove);
                
            }
        }
        
        //re-sets the popupmenu as updated and visible
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
    
    private void DividingArmies(final int[][] army) {
        ClearPopupMenu();
        //indexer
        int i = 0;
        //loops for every army in the list
        for (int[] army2 : army) {
            //checks if army on loop index is stationed on selected node
            if(army[i][2] == nodeSelected) {
                //checks to make sure the army is at least an M size
                if(army[i][1] > 5) {
                    //creates the menu item for this army to divide
                    JMenuItem menuItemMove = new JMenuItem(ConvertSize(army[i][1], army[i][3]));
                    menuItemMove.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent event) {
                            //temporary actions. will change to send to Temp once Temp is done.
                            labelInfo6.setText(army[0][1] + " is dividing");
                            ClearPopupMenu();
                        }
                    });
                    //finally, adds this item to the popup menu.
                    popupMenu.add(menuItemMove);
                }
            i++;
            }
        }

        //re-sets the popupmenu as updated and visible
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
    
    private void BeginMergingArmies(final int[][] armies) {
        ClearPopupMenu();
        
        //first, it re checks which armies are at this node
        //then it adds a new menu item for each medium or small army so long
        //as there are at least two of that size. x is a secondary indexer.
        int i = 0; int i2 = 0;
        for (int[] armie : armies) {
            //checks if army on loop index is stationed on selected node
            if(armies[i][2] == nodeSelected) {
                for (int[] armie2 : armies) {
                    if(armies[i][1] == armies[i2][1] && armies[i][0] != armies[i2][0])
                    {
                        //creating indexer z as a variable dimmed 'final' is required
                        final int z = i;
                        //creates the menu item for this army to merge
                        JMenuItem menuItemMerges = new JMenuItem(ConvertSize(armies[i][1], armies[i][3]));
                        menuItemMerges.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent event) {
                                //sends current array item to MergeArmy method
                                MergeArmy(armies, z);
                            }
                        });
                        //finally, adds this item to the popup menu.
                        popupMenu.add(menuItemMerges);
                    }
                    i2++;
                }
            }
            i++;
        }
        
        
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
    
    //MergeArmy is sent the full list of armies, and the index location of which army to merge
    private void MergeArmy(final int[][] armies, int z) {
        ClearPopupMenu();
        
        //sets up an array, first variable being an indexer, second containing
        //[0] = id, [1] = size, [2] = location
        final int[] armyToMerge = new int[3];
        armyToMerge[0] = armies[z][0];
        armyToMerge[1] = armies[z][1];
        armyToMerge[2] = armies[z][2];
        
        
        int i = 0;
        for (int[] armie : armies) {
            //checks if army on loop index is stationed on selected node
            if(armies[i][2] == nodeSelected) {
                //checks if army at index is same size as and not same id as 
                //the selected army to merge
                if(armies[i][0] != armyToMerge[0] && armies[i][1] == armyToMerge[1])
                {
                    //creates the menu item to merge 
                        //creates Final declared int for inside next component
                    final int i2 = i;
                    
                    JMenuItem menuItemMerges = new JMenuItem(ConvertSize(armies[i][1], armies[i][3]));
                    menuItemMerges.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent event) {
                            //prepared to send to Temp
                            labelInfo6.setText("merge " + armyToMerge [0] + " with " + armies[i2][1]);
                            ClearPopupMenu();
                        }
                    });
                }
                
            }
        }
        
        popupMenu.updateUI();
        popupMenu.setVisible(true);
        popupMenu.setLocation(x, y);
    }
    //converts the army size integer into real words.
    private String ConvertSize(int armieSize, int isFleet) {
        //creates a string for output
        String size;
        //checks the size for which letter size it is associated with
        if(isFleet == 1)
            //if it's a fleet, size is always "F" for "Fleet"
            size = "F ";
        else
        {
            if(armieSize > 10)
                //if it's in the "Large" range it gets an "L"
                size = "L ";
            else if (armieSize > 5)
                //if in "Medium" size range, it gets an "M"
                size = "M ";
            else
                //lastly, for anything under size 6, it gets an "S" for "Small"
                size = "S ";
        }
        return size;
    }
 
    private void ClearMenuInfo() {
        /* This method clears all of the visible information presented to
            the player, to end their turn and ensure the next player is
            not given any of their information.                   */
        
        //empties the text in the info panel
        labelInfo1.setText("");
        labelInfo2.setText("");
        labelInfo3.setText("");
        labelInfo4.setText("");
        labelInfo5.setText("");
        labelInfo6.setText("");
    }
    public void ClearPopupMenu() {
        //empties and hides the popup menu.
        popupMenu.setVisible(false);
        popupMenu.removeAll();
        popupMenu.add(menuItemClose);
    }
    
    public void SetDefaultColours() throws IOException {
        //this method resets the node colours to default
        Image img;
        //indexer i, which is used as the curent node id in the loop
        int i = 0;
        for (Node nodes : Scenario.listOfNodes) {
            //creates the base image variable
            
            //checks which player's turn it is
            if(nodes.isPort == true) {
                //sets the image to be a port town node
                img = ImageIO.read(getClass().getResource("Images/map-node-port.png"));
            }else if (nodes.isCity == true) {
                //sets image for cities
                img = ImageIO.read(getClass().getResource("Images/map-node-town.png"));
            } else {
                //else catches the remainder, which are checkpoint locations
                img = ImageIO.read(getClass().getResource("Images/map-node-road.png"));
            }
            
            //casts the image to an icon
            ImageIcon img2 = new ImageIcon(img);
            
            //switch case for current indexed button object to change
            switch (i) {
                case 0: 
                    nodePlaceholder1.setIcon(img2);
                    break;
                case 1:
                    nodePlaceholder2.setIcon(img2);
                    break;
                case 2:
                    nodePlaceholder3.setIcon(img2);
                    break;
                case 3:
                    nodePlaceholder4.setIcon(img2);
                    break;
                case 4:
                    nodePlaceholder5.setIcon(img2);
                    break;
                case 5:
                    nodePlaceholder6.setIcon(img2);
                    break;
                case 6:
                    nodePlaceholder7.setIcon(img2);
                    break;
                case 7:
                    nodePlaceholder8.setIcon(img2);
                    break;
                case 8:
                    nodePlaceholder9.setIcon(img2);
                    break;
                case 9:
                    nodePlaceholder10.setIcon(img2);
                    break;
                case 10:
                    nodePlaceholder11.setIcon(img2);
                    break;
                case 11:
                    nodePlaceholder12.setIcon(img2);
                    break;
                case 12:
                    nodePlaceholder13.setIcon(img2);
                    break;
                case 13:
                    nodePlaceholder14.setIcon(img2);
                    break;
            }
            
            //increments i at end of loop
            i++;
        }
    }
    
    public void SetColours() {
        //this method sets the node colours at the start of each turn.
        
        
        //establishes an army array of all player controlled armies
        int[][] armies = null;
        //calls to fill the array
        armies = ObtainArmies(armies);
        
        //indexer i, which is used as the curent node id in the loop, 
        //followed by a loop for every node (indexer i2) in the list of nodes
        int i = 0;
        for (Node nodes : Scenario.listOfNodes) {
            
            int i2 = 0;
            //nested loop for going through each army in the army array
            for (int[] armie : armies) {
                //checks if current army in array at index is located at this node
                if (i == armies[i2][2]) {
                    try {
                        SetPlayerNodeColour(i);
                    } catch (IOException ex) {
                        Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                i2++;
            }

            i++;
        }
        
    }
    
    //SetNodeColour houses the switch statement for setting a node colour
    private void SetPlayerNodeColour(int indexer) throws IOException {
        //creates the base image variable
        Image img;
        //checks which player's turn it is
        if(Global.curPlayer == 0) {
            //sets the image to be red or blue, depending on the player
            img = ImageIO.read(getClass().getResource("Images/map-node-red.png"));
            //casts the image to an icon
            ImageIcon img2 = new ImageIcon(img);
            //switch to change the node at index selected
            switch (indexer) {
                case 0: 
                    nodePlaceholder1.setIcon(img2);
                    break;
                case 1:
                    nodePlaceholder2.setIcon(img2);
                    break;
                case 2:
                    nodePlaceholder3.setIcon(img2);
                    break;
                case 3:
                    nodePlaceholder4.setIcon(img2);
                    break;
                case 4:
                    nodePlaceholder5.setIcon(img2);
                    break;
                case 5:
                    nodePlaceholder6.setIcon(img2);
                    break;
                case 6:
                    nodePlaceholder7.setIcon(img2);
                    break;
                case 7:
                    nodePlaceholder8.setIcon(img2);
                    break;
                case 8:
                    nodePlaceholder9.setIcon(img2);
                    break;
                case 9:
                    nodePlaceholder10.setIcon(img2);
                    break;
                case 10:
                    nodePlaceholder11.setIcon(img2);
                    break;
                case 11:
                    nodePlaceholder12.setIcon(img2);
                    break;
                case 12:
                    nodePlaceholder13.setIcon(img2);
                    break;
                case 13:
                    nodePlaceholder14.setIcon(img2);
                    break;
            }
        } else if(Global.curPlayer == 1) {
            //exact same as above but with blue team png called to
            img = ImageIO.read(getClass().getResource("Images/map-node-blue.png"));
            ImageIcon img2 = new ImageIcon(img);
            switch (indexer) {
                case 0: 
                    nodePlaceholder1.setIcon(img2);
                    break;
                case 1:
                    nodePlaceholder2.setIcon(img2);
                    break;
                case 2:
                    nodePlaceholder3.setIcon(img2);
                    break;
                case 3:
                    nodePlaceholder4.setIcon(img2);
                    break;
                case 4:
                    nodePlaceholder5.setIcon(img2);
                    break;
                case 5:
                    nodePlaceholder6.setIcon(img2);
                    break;
                case 6:
                    nodePlaceholder7.setIcon(img2);
                    break;
                case 7:
                    nodePlaceholder8.setIcon(img2);
                    break;
                case 8:
                    nodePlaceholder9.setIcon(img2);
                    break;
                case 9:
                    nodePlaceholder10.setIcon(img2);
                    break;
                case 10:
                    nodePlaceholder11.setIcon(img2);
                    break;
                case 11:
                    nodePlaceholder12.setIcon(img2);
                    break;
                case 12:
                    nodePlaceholder13.setIcon(img2);
                    break;
                case 13:
                    nodePlaceholder14.setIcon(img2);
                    break;
            }
        }
    }
    
    final private void SetCurrentColour() throws IOException {
        //sets the node selected to a white background
        Image img;
        img = ImageIO.read(getClass().getResource("Images/map-node-selected.png"));
        ImageIcon img2 = new ImageIcon(img); 
        switch (nodeSelected) {
                case 0: 
                    nodePlaceholder1.setIcon(img2);
                    break;
                case 1:
                    nodePlaceholder2.setIcon(img2);
                    break;
                case 2:
                    nodePlaceholder3.setIcon(img2);
                    break;
                case 3:
                    nodePlaceholder4.setIcon(img2);
                    break;
                case 4:
                    nodePlaceholder5.setIcon(img2);
                    break;
                case 5:
                    nodePlaceholder6.setIcon(img2);
                    break;
                case 6:
                    nodePlaceholder7.setIcon(img2);
                    break;
                case 7:
                    nodePlaceholder8.setIcon(img2);
                    break;
                case 8:
                    nodePlaceholder9.setIcon(img2);
                    break;
                case 9:
                    nodePlaceholder10.setIcon(img2);
                    break;
                case 10:
                    nodePlaceholder11.setIcon(img2);
                    break;
                case 11:
                    nodePlaceholder12.setIcon(img2);
                    break;
                case 12:
                    nodePlaceholder13.setIcon(img2);
                    break;
                case 13:
                    nodePlaceholder14.setIcon(img2);
                    break;
            }
    }
    private void buttonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMenuActionPerformed
        //button for quitting current scenario and returning to main menu
        new MainMenu().setVisible(true);
        Map.this.dispose();
    }//GEN-LAST:event_buttonMenuActionPerformed
        
    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        //button for quitting the game altogether
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    
    
    /*Placeholder nodes set the nodeSelected value, then call action.
        all of the nodes do the same actions: set the global value for
        the selected node's index value, sets the globals for the selected
        node's x and y values on the gui, then calls to the Action method */
    
    private void nodePlaceholder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder1ActionPerformed
        nodeSelected = 0;
        x = nodePlaceholder1.getX();
        y = nodePlaceholder1.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder1ActionPerformed

    private void nodePlaceholder2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder2ActionPerformed
        nodeSelected = 1;
        x = nodePlaceholder2.getX();
        y = nodePlaceholder2.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder2ActionPerformed

    private void nodePlaceholder3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder3ActionPerformed
        nodeSelected = 2;
        x = nodePlaceholder3.getX();
        y = nodePlaceholder3.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder3ActionPerformed

    private void nodePlaceholder4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder4ActionPerformed
        nodeSelected = 3;
        x = nodePlaceholder4.getX();
        y = nodePlaceholder4.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder4ActionPerformed

    private void nodePlaceholder5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder5ActionPerformed
        nodeSelected = 4;
        x = nodePlaceholder5.getX();
        y = nodePlaceholder5.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder5ActionPerformed

    private void nodePlaceholder6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder6ActionPerformed
        nodeSelected = 5;
        x = nodePlaceholder6.getX();
        y = nodePlaceholder6.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder6ActionPerformed

    private void nodePlaceholder7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder7ActionPerformed
        nodeSelected = 6;
        x = nodePlaceholder7.getX();
        y = nodePlaceholder7.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder7ActionPerformed

    private void nodePlaceholder8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder8ActionPerformed
        nodeSelected = 7;
        x = nodePlaceholder8.getX();
        y = nodePlaceholder8.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder8ActionPerformed

    private void nodePlaceholder9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder9ActionPerformed
        nodeSelected = 8;
        x = nodePlaceholder9.getX();
        y = nodePlaceholder9.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder9ActionPerformed

    private void nodePlaceholder10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder10ActionPerformed
        nodeSelected = 9;
        x = nodePlaceholder10.getX();
        y = nodePlaceholder10.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder10ActionPerformed

    private void nodePlaceholder11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder11ActionPerformed
        nodeSelected = 10;
        x = nodePlaceholder11.getX();
        y = nodePlaceholder11.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder11ActionPerformed

    private void nodePlaceholder12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder12ActionPerformed
        nodeSelected = 11;
        x = nodePlaceholder12.getX();
        y = nodePlaceholder12.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder12ActionPerformed

    private void nodePlaceholder13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder13ActionPerformed
        nodeSelected = 12;
        x = nodePlaceholder13.getX();
        y = nodePlaceholder13.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder13ActionPerformed

    private void nodePlaceholder14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePlaceholder14ActionPerformed
        nodeSelected = 13;
        x = nodePlaceholder14.getX();
        y = nodePlaceholder14.getY();
        Action();
    }//GEN-LAST:event_nodePlaceholder14ActionPerformed

    private void buttonFinishTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinishTurnActionPerformed

        //This button end's the current player's turn and starts the turn
        //for the next player
        if(Global.curPlayer == 0)
        {
            Global.curPlayer = 1;
            labelCurPlayer.setText("Player Two's turn");
            //more shit happens here
        } else {
            Global.curPlayer = 0;
            labelCurPlayer.setText("Player One's turn");
            //more shit happens here
        }
        //try catch for setting default node colours
        try {
            SetDefaultColours();
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        //sets colours of nodes with current player's armies
        SetColours();
        
        ClearMenuInfo();
        ClearPopupMenu();
    }//GEN-LAST:event_buttonFinishTurnActionPerformed

    private void menuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloseActionPerformed
        //a base menu item always added to the popup menu that, when clicked,
        //clears and closes the popup menu.
        ClearPopupMenu();
        ClearMenuInfo();
        try {
            SetDefaultColours();
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        SetColours();
    }//GEN-LAST:event_menuItemCloseActionPerformed

    private void popupMenuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_popupMenuFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_popupMenuFocusLost

    private void buttonMapImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMapImageActionPerformed
        ClearPopupMenu();
        ClearMenuInfo();
        try {
            SetDefaultColours();
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        SetColours();
    }//GEN-LAST:event_buttonMapImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Map().setVisible(true);
            }
            
        });
        
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonFinishTurn;
    private javax.swing.JButton buttonMapImage;
    private javax.swing.JToggleButton buttonMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JLabel labelCurPlayer;
    private javax.swing.JLabel labelInfo1;
    private javax.swing.JLabel labelInfo2;
    private javax.swing.JLabel labelInfo3;
    private javax.swing.JLabel labelInfo4;
    private javax.swing.JLabel labelInfo5;
    private javax.swing.JLabel labelInfo6;
    private javax.swing.JLabel labelOpponent;
    private javax.swing.JLabel labelScenario;
    private javax.swing.JLabel labelTurnCount;
    private javax.swing.JPanel menuInfo;
    private javax.swing.JMenuItem menuItemClose;
    private javax.swing.JButton nodePlaceholder1;
    private javax.swing.JButton nodePlaceholder10;
    private javax.swing.JButton nodePlaceholder11;
    private javax.swing.JButton nodePlaceholder12;
    private javax.swing.JButton nodePlaceholder13;
    private javax.swing.JButton nodePlaceholder14;
    private javax.swing.JButton nodePlaceholder2;
    private javax.swing.JButton nodePlaceholder3;
    private javax.swing.JButton nodePlaceholder4;
    private javax.swing.JButton nodePlaceholder5;
    private javax.swing.JButton nodePlaceholder6;
    private javax.swing.JButton nodePlaceholder7;
    private javax.swing.JButton nodePlaceholder8;
    private javax.swing.JButton nodePlaceholder9;
    private javax.swing.JPanel panelMap;
    private javax.swing.JPopupMenu popupMenu;
    // End of variables declaration//GEN-END:variables
}
